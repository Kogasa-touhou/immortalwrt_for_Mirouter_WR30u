name: Build ImmortalWrt (WR30U MT7981)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # ✅ 最大化空间
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true

      # ✅ 清理空间
      - name: Clean up system
        run: |
          sudo apt-get clean
          docker image prune -a -f || true
          df -h

      # ✅ 安装构建依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gcc-multilib gettext git \
            libncurses5-dev libssl-dev python3 python3-distutils python3-setuptools \
            rsync unzip zlib1g-dev file wget time ccache

      # ✅ 克隆 ImmortalWrt 源码（浅克隆 + 自动重试）
      - name: Clone ImmortalWrt source
        run: |
          retries=3
          for i in $(seq 1 $retries); do
            echo "Clone attempt $i..."
            git clone --depth=1 https://github.com/immortalwrt/immortalwrt.git -b master && break
            echo "Retrying in 10s..."
            sleep 10
          done
          cd immortalwrt
          git log -1

      # ✅ 添加主题与插件
      - name: Add extra packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd immortalwrt/package
          mkdir -p custom && cd custom

          # Argon 主题
          git -c http.extraHeader="Authorization: Bearer $GITHUB_TOKEN" clone --depth=1 https://github.com/sbwml/luci-theme-argon.git luci-theme-argon
          git -c http.extraHeader="Authorization: Bearer $GITHUB_TOKEN" clone --depth=1 https://github.com/sbwml/luci-app-argon-config.git luci-app-argon-config

          # DDNS-Go
          git -c http.extraHeader="Authorization: Bearer $GITHUB_TOKEN" clone --depth=1 https://github.com/sirpdboy/luci-app-ddns-go.git

          # OpenClash
          git -c http.extraHeader="Authorization: Bearer $GITHUB_TOKEN" clone --depth=1 https://github.com/vernesong/OpenClash.git luci-app-openclash

      # ✅ 更新 feeds
      - name: Update feeds
        run: |
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # ✅ 自动配置 WR30U + 插件 + 主题
      - name: Configure target
        run: |
          cd immortalwrt
          rm -f .config
          cat >> .config <<EOF
          CONFIG_TARGET_mediatek=y
          CONFIG_TARGET_mediatek_filogic=y
          CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u=y

          # Luci UI & Theme
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-app-argon-config=y

          # Network Apps
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-ddns-go=y

          # Basic tools
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_wget=y

          # Build options
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          EOF

          make defconfig
          cat .config

      # ✅ 下载源码包
      - name: Download sources
        run: |
          cd immortalwrt
          make download -j$(nproc)

      # ✅ 编译固件（失败则单线程重试）
      - name: Build firmware
        run: |
          cd immortalwrt
          make -j$(nproc) || make -j1 V=s

      # ✅ 整理输出
      - name: Organize firmware
        run: |
          cd immortalwrt
          mkdir -p ../output
          find bin/targets/ -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) -exec cp {} ../output/ \;
          df -h
          ls -lh ../output

      # ✅ 上传到 Artifacts
      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-wr30u
          path: output
